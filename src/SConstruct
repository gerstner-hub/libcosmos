Import('env')

libenv = env.Clone()
public_includes = Dir('.').srcnode().abspath + '/../include'
libenv.Append(LINKFLAGS='-pthread')
libenv.Append(CPPPATH=['.'])
libenv.Append(CPPPATH=public_includes)

libcosmos_srcs = env.GatherSources(suffixes=['.cxx'])

if env['libtype'] == 'static':
    libcosmos = libenv.StaticLibrary(
        'cosmos',
        libcosmos_srcs
    )
else:

    libenv.Append(CCFLAGS='-fvisibility=hidden')
    libenv.Append(CCFLAGS='-DCOSMOS_EXPORT')

    # the SONAME and SHLIBVERSION are the knobs to tune for ABI versioning, but
    # libcosmos currently doesn't really have a concept for that.
    #
    # For packaging you can consider using an SONAME matching the exact library
    # release version resulting in a new ABI for each release. This at least
    # avoids inconsistencies, but breaks application that aren't rebuild against
    # the new lib version.

    libcosmos = libenv.SharedLibrary(
        'cosmos',
        libcosmos_srcs,
        SHLIBVERSION='0.2.0',
        SONAME='libcosmos.so.0'
    )

env.RegisterLibConfig('libcosmos', libcosmos, {
    'CPPPATH': [public_includes],
    'LINKFLAGS': ['-pthread']
})

Return('env')
