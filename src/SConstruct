Import('env')

libenv = env.Clone()
public_includes = Dir('.').srcnode().abspath + '/../include'
libenv.Append(LINKFLAGS='-pthread')
libenv.Append(CPPPATH=['.'])
libenv.Append(CPPPATH=public_includes)

libcosmos_srcs = env.GatherSources(suffixes=['.cxx'])


# the SONAME and SHLIBVERSION are the knobs to tune for ABI versioning, but
# libcosmos currently doesn't really have a concept for that.
#
# For packaging you can consider using an SONAME matching the exact library
# release version resulting in a new ABI for each release. This at least
# avoids inconsistencies, but breaks applications that aren't rebuilt against
# the new lib version.

version, soname, tag = libenv.GetSharedLibVersionInfo('libcosmos')
libenv.AddVersionFileTarget('libcosmos', tag)

if env['libtype'] == 'static':
    libcosmos = libenv.StaticLibrary(
        'cosmos',
        libcosmos_srcs
    )
else:

    libenv.Append(CCFLAGS='-fvisibility=hidden')
    libenv.Append(CCFLAGS='-DCOSMOS_EXPORT')

    libcosmos = libenv.SharedLibrary(
        'cosmos',
        libcosmos_srcs,
        SHLIBVERSION=version,
        SONAME=soname
    )

env.RegisterLibConfig(
    'libcosmos',
    libcosmos,
    {
        'CPPPATH': [public_includes],
        'LINKFLAGS': ['-pthread']
    },
    {
        'version': version
    }
)

Return('env')
